from scapy.all import IP, TCP, sr1
import requests

target_ip = input("Enter target IP: ")

def port_scan(target_ip, ports):
    open_ports = []
    for port in ports:
        packet = IP(dst=target_ip)/TCP(dport=port, flags='S')
        response = sr1(packet, timeout=1, verbose=0)
        if response is not None and response.haslayer(TCP) and response.getlayer(TCP).flags ==  18:
            open_ports.append(port)
            return open_ports
        
def service_enumeration(target_ip, open_ports):
    services = {}
    for port in open_ports:
        packet = IP(dst=target_ip)/TCP(dport=port, flags='A')
        response = sr1(packet, timeout=1, verbose=0)
        if response is not None and response.haslayer(TCP) and response.getlayer(TCP).flags == 16:
            services[port] = 'Unknown'
    return services

def public_vulnerability_check(services):
    for port, service in services.items():
        cve_url = f"https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString={service}"
try:
    response = requests.get(cve_url)
    if response.status_code == 200:
        json_response = response.json()
        cve_items = json_response.get('result', {}).get('CVE_Items', [])
    
        for item in cve_items:
            cve_id = item['cve']['CVE_data_meta']['ID']
            description = item['cve']['description']['description_data'][0]['value']
            print(f"Port {port} - Service '{service}' has vulnerability {cve_id}: {description}")
    else:
        print(f"Failed to retrieve CVE data for service '{service}'")
except requests.exceptions.RequestException as e:
    print(f"An error occured while trying to retrieve CVE data for service '{service}'")

ports_to_scan = range(1, 1025)
open_ports = port_scan(target_ip, ports_to_scan)
services = service_enumeration(target_ip, open_ports)
public_vulnerability_check(services)

print(f"Open ports on {target_ip}:")
for port in open_ports:
    print (f"Port {port} is open.")
print("\nServices running on open ports:")
for port, service in services.items():
    print(f"Port {port}: {service}")

public_vulnerability_check(services)

input("Press enter to exit.")